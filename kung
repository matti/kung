#!/usr/bin/env bash
set -euo pipefail

_err() {
  _echoerr "err: $*"
  exit 1
}

_echoerr() {
  1>&2 echo "$*"
}

subcommand=${1:-}
case $subcommand in
  kinds)
    kinds=""
    for kind in $(kubectl api-resources --verbs=list,delete -o name); do
      case $kind in
        namespaces)
          continue
        ;;
        nodes|events|events.events.k8s.io)
          continue
        ;;
      esac
      kinds="${kinds}${kind} "
    done

    echo "$kinds"
  ;;
  merge)
    base=$2
    branch=${3:-.}

    cd "$base"
    prefix=$(pwd)
    leafs=$(find "$branch" -type d | sort -r | awk 'a!~"^"$0{a=$0;print}')
    if [ "$leafs" = "" ]; then
      leafs="."
    fi

    for leaf in $leafs; do
      # find leaf directories and walk backwards
      for resource in $(find $leaf -type f); do
        name=$(basename "$resource")
        kind=${name%.*}
        files=""

        cd $leaf
        while true; do
          current=$(pwd)

          path=${current#"${prefix}"}
          #                                            deployment.              deployment-             -deployment.               -deployment-
          for f in $(find * -maxdepth 0 -type f -regex "^${kind}\..*" -o -regex "^${kind}-.*" -o -regex ".*-${kind}\..*" -o -regex ".*-${kind}-.*"); do
            files="$files ${prefix}${path}/${f}"
          done

          [ "$current" = "$prefix" ] && break

          cd ..
        done
        _echoerr "merge:${files}"
        yq -M ea '. as $item ireduce ({}; . *+ $item )' $files
      done
    done
  ;;
  eval)
    lines=""
    IFS=''
    while read line; do
      lines="${lines}${line}
"
    done
    IFS=' '

    echo "$lines" | envsubst
  ;;
  apply)
    timestamp=$(date +%Y-%m-%d-%H-%M-%S)
    labels=""
    opts=${*:2}
    for opt in $opts; do
      case $opt in
        --label=*)
          label=${opt#*=}
          labels="$labels $label"
          shift
        ;;
      esac
    done
    namespace=$2
    name=$3
    labels=" \
      ${labels} \
      app.kubernetes.io/managed-by=kung \
      kung/namespace=$namespace \
      kung/name=$name \
      kung/at=$timestamp \
    "

    manifest=""
    IFS=''
    while read line; do
      manifest="$manifest
$line"
    done
    IFS=' '

    while true; do
      >/dev/null kubectl label "namespace/$namespace" --overwrite $labels && break
      kubectl create namespace "$namespace"
    done

    printf "%s\n" "$manifest" | tee /dev/stderr | kubectl apply -n "$namespace" -f -
    printf "%s\n" "$manifest" | kubectl label -n "$namespace" --overwrite $labels -f -
    # || true because errors when something, like service, can not be restarted
    printf "%s\n" "$manifest" | kubectl rollout restart -n "$namespace" -f - || true

    wait
  ;;
  prune)
    namespace=$2
    name=$3
    timestamp=$4

    for kind in $($0 kinds); do
      (
        exec kubectl delete "$kind" \
          --all-namespaces \
          -l "app.kubernetes.io/managed-by=kung,kung/namespace=$namespace,kung/name=$name,kung/at!=$timestamp"
      ) 2>&1 | sed -le "s#^#$kind: #;" &

      while true; do
        running=$(jobs -pr | wc -l | xargs)
        [ "$running" -lt 8 ] && break
        sleep 1
      done
    done
  ;;
  delete)
    namespace=$2
    name=$3

    for kind in $(0 kinds); do
      (
        exec kubectl delete "$kind" \
          --all-namespaces \
          -l "app.kubernetes.io/managed-by=kung,kung/namespace=$namespace,kung/name=$name"
      ) 2>&1 | sed -le "s#^#$kind: #;" &

      while true; do
        running=$(jobs -pr | wc -l | xargs)
        [ "$running" -lt 8 ] && break
        sleep 1
      done
    done
  ;;
  *)
    _err "?"
  ;;
esac